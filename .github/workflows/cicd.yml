name: cicd

# Run workflow on push
on: 
  push:
    branches: ['**']  # Run on all branches
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    # Test code quality and functionality across multiple environments
    runs-on: ${{ matrix.os }}
    
    strategy:
      # Don't cancel all jobs if one fails - collect all failures
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.13"]
        os: [ubuntu-latest,] # macos-latest]  # windows-latest,

    steps:
      # check out repos
      - name: Check out repo
        uses: actions/checkout@v4
      
      # Install and setup uv
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          # Updated cache key to reflect pyproject.toml as the source of truth
          cache-dependency-glob: "pyproject.toml"
      
      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}
      
      # Install dependencies with uv (for API service)
      - name: Install dependencies
        run: |
          echo "Creating virtual environment..."
          uv venv # This will create .venv using the Python selected by 'uv python install'
          echo "Installing dependencies from pyproject.toml into the virtual environment..."
          uv sync -v # Install all dependencies, verbose
        shell: bash
      
      - name: Install dev dependencies
        run: uv pip install .[dev]
        shell: bash
      
      - name: Lint with flake8
        run: |
          echo "Running flake8 linter..."
          uv run flake8 . --exclude=.venv --count --select=E9,F63,F7,F82 --show-source --statistics
          uv run flake8 . --exclude=.venv --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        shell: bash
      
      - name: Test with pytest and collect coverage
        run: |
          echo "Running pytest..."
          uv run pytest --cov=utilities --cov=. --cov-report=xml --cov-report=term
        shell: bash
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@3440e5ef70c638a9f44602a80ab017feee1309fe
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: garthmortensen/timeseries-api

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@f2dba722c67b86c6caa034178c6e4d35335f6706
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  docker:
    name: Build and Push Docker Image
    # Create and publish Docker image to DockerHub
    needs: test  # gate this behind successful tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@afeb29a6e0d7d6258844ecabe6eba67d13443680
      
      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
        with:
          images: goattheprofessionalmeower/timeseries-api
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@84ad562665bb303b549fec655d1b64f9945f3f91
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


